package com.netapp.framework.http.client;

import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;

import com.netapp.framework.url.builder.UrlBuilder;

/**
 * <p>
 * The HttpClient class can be used to make a HTTP connection and read from the connection <br/>
 * It uses UrlBuilder to construct the URL to establish the connection <br/>
 * <br/>
 * Defaults <br/>
 * TimeOut 		: 5000ms / 5s <br/>
 * HTTP method	: GET <br/>
 * </p>
 * 
 * @author <a href="mailto:hshashid@netapp.com">hshashid</a>
 * @see UrlBuilder
 */
public abstract class HttpClient {

	private static final String EXCEPTION_MESSAGE="UrlBuilder cannot be null!";
	private static final String DEFAULT_METHOD ="GET";
	private UrlBuilder urlBuilder;
	
	public HttpClient(UrlBuilder urlBuilder){
		this.urlBuilder = urlBuilder;
	}
	
	private int timeOut=5000;

	/**
	 * Method to return the timeout value set
	 * 
	 * @return The set timeout value
	 */
	public int getTimeOut() {
		return timeOut;
	}

	/**
	 * Method to set & override the default timeout value of 5s
	 * 
	 * @param timeOut
	 */
	public void setTimeOut(int timeOut) {
		this.timeOut = timeOut;
	}

	/**
	 * Method makes a HTTP connection to the configured URL and creates 
	 * an InputStream to read from the connection
	 *  
	 * @return InputStream to read from the HTTP connection
	 * @throws IOException
	 */
	public InputStream getDataFromWire() throws IOException{
		//Validate the builder
		validateUrlBuilder(urlBuilder);
		
		//Clean up the URL
		String urlString = sanitizeURL(urlBuilder.buildUrl());

		//If we could not create a url, then return a null
		if(urlString==null){
			return null;
		}

		//HTTP processes, with default method=GET and timeout=5s
		URL url = new URL(urlBuilder.buildUrl());
		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		conn.setRequestMethod(requestMethod()==null?DEFAULT_METHOD:requestMethod());
		conn.setReadTimeout(getTimeOut());
		
		//If further configuration changes need to be made, implement this method
		configureConnection(conn);
		
		//If we do not get a successful response then throw an exception
		if(conn.getResponseCode()!=HttpURLConnection.HTTP_OK){
			throw new RuntimeException("Failed: HTTP error code : "+ conn.getResponseMessage());
		}

		//Clean up the stream off of junk characters
		return sanitizeStream(conn.getInputStream());
	}

	/**
	 * Method to check if the UrlBuilder given to the client is null
	 * 
	 * @param urlBuilder
	 * @throws IOException 
	 */
	private void validateUrlBuilder(UrlBuilder urlBuilder) throws IOException {
		if(urlBuilder==null){
			throw new IOException(EXCEPTION_MESSAGE);
		}
	}

	/**
	 * Method to configure the HTTP method
	 * 
	 * @return HTTP method (GET,POST,PUT,etc.)
	 */
	protected abstract String requestMethod();
	
	/**
	 * Method to clean up the URL, if required.
	 * If no clean up required then just return the String as is.
	 *  
	 * @param url URL generated by the UrlBuilder
	 * @return Cleaned up url
	 */
	protected abstract String sanitizeURL(String url);
	
	/**
	 * Method to clean up the InputStream off the junk characters, if required.
	 * If no clean up required then just return the InputStream as is.
	 * 
	 * @param InputStream InputStream that to the HTTP connection
	 * @return Cleaned up InputStream
	 * @throws IOException
	 */
	protected abstract InputStream sanitizeStream(InputStream in) throws IOException;
	
	/**
	 * Method to do HttpURLConnection changes, if required.
	 * If no then a dummy implementation should suffice.
	 * 
	 * @param HttpURLConnection
	 */
	protected abstract void configureConnection(HttpURLConnection conn);

}

